{"version":3,"sources":["assets/images/Cover.jpg","pages/Landing.js","pages/Home.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","handleMenuClick","e","path","key","console","log","props","history","push","menu","className","onClick","this","Item","type","justify","align","overlay","visible","placement","shape","id","src","Logo","alt","React","Component","antIcon","style","fontSize","spin","Home","paddingTop","indicator","Boolean","window","location","hostname","match","Routing","exact","component","withRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,mC,mSCyE5BC,E,2MAhEXC,gBAAkB,SAACC,GACf,IAAIC,EACJ,OAAQD,EAAEE,KACN,IAAK,IACDC,QAAQC,IAAI,QACZH,EAAI,QACJ,MACJ,IAAK,IACDE,QAAQC,IAAI,YACZH,EAAI,QACJ,MACJ,IAAK,IACDE,QAAQC,IAAI,cACZH,EAAI,QACJ,MACJ,IAAK,IACDE,QAAQC,IAAI,UACZH,EAAI,QAKZ,EAAKI,MAAMC,QAAQC,KAAKN,I,wEAIxB,IAAMO,EACF,kBAAC,IAAD,CAAMC,UAAU,OAAOC,QAASC,KAAKZ,iBACjC,kBAAC,IAAKa,KAAN,CAAWH,UAAU,YAAYP,IAAI,KACjC,kBAAC,IAAD,CAAMW,KAAK,SADf,QAIA,kBAAC,IAAKD,KAAN,CAAWH,UAAU,YAAYP,IAAI,KACjC,kBAAC,IAAD,CAAMW,KAAK,SADf,YAIA,kBAAC,IAAKD,KAAN,CAAWH,UAAU,YAAYP,IAAI,KACjC,kBAAC,IAAD,CAAMW,KAAK,UADf,WAIA,kBAAC,IAAKD,KAAN,CAAWH,UAAU,YAAYP,IAAI,KACjC,kBAAC,IAAD,CAAMW,KAAK,cADf,WAMR,OACI,yBAAKJ,UAAU,WACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAKI,KAAK,OAAOC,QAAQ,SAASC,MAAM,UACpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,QAASR,EAAMS,SAAS,EAAMC,UAAU,gBAC9C,kBAAC,IAAD,CAAQT,UAAU,WAAWI,KAAK,UAAUM,MAAM,UAC9C,yBAAKV,UAAU,WAAWW,GAAG,QAAQC,IAAKC,IAAMC,IAAI,e,GAvDlEC,IAAMC,W,SCJtBC,EAAU,kBAAC,IAAD,CAAMb,KAAK,UAAUc,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAmBnDC,EAjBF,WACT,OACI,yBAAKH,MAAO,CAAEI,WAAY,QACtB,kBAAC,IAAD,CAAKlB,KAAK,OAAOC,QAAQ,SAASC,MAAM,UACpC,kBAAC,IAAD,KACI,iDAGR,kBAAC,IAAD,CAAKF,KAAK,OAAOC,QAAQ,SAASC,MAAM,UACpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMiB,UAAWN,QCHjBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCJAC,E,iLAEE,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACtC,KAAK,IAAIuC,UAAWC,YAAW3C,KAC5C,kBAAC,IAAD,CAAOG,KAAK,QAAQuC,UAAWC,YAAWX,W,GANxCN,IAAMC,WAa5BiB,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SDwG/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1960ec11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cover.e0052efb.jpg\";","import React from 'react';\r\nimport { Button, Row, Col, Menu, Dropdown, Icon } from 'antd';\r\nimport Logo from '../assets/images/Cover.jpg';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nclass Landing extends React.Component {\r\n\r\n    handleMenuClick = (e) => {\r\n        let path;\r\n        switch (e.key) {\r\n            case \"1\":\r\n                console.log(\"Home\");\r\n                path = `/home`\r\n                break;\r\n            case \"2\":\r\n                console.log(\"Projects\");\r\n                path = `/home`\r\n                break;\r\n            case \"3\":\r\n                console.log(\"Contact Me\");\r\n                path = `/home`;\r\n                break;\r\n            case \"4\":\r\n                console.log(\"Resume\");\r\n                path = `/home`;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    render() {\r\n        const menu = (\r\n            <Menu className=\"menu\" onClick={this.handleMenuClick}>\r\n                <Menu.Item className=\"menu-item\" key=\"1\">\r\n                    <Icon type=\"home\" />\r\n                    Home\r\n              </Menu.Item>\r\n                <Menu.Item className=\"menu-item\" key=\"2\">\r\n                    <Icon type=\"book\" />\r\n                    Projects\r\n              </Menu.Item>\r\n                <Menu.Item className=\"menu-item\" key=\"3\">\r\n                    <Icon type=\"phone\" />\r\n                    Contact\r\n              </Menu.Item>\r\n                <Menu.Item className=\"menu-item\" key=\"4\">\r\n                    <Icon type=\"file-text\" />\r\n                    Resume\r\n              </Menu.Item>\r\n            </Menu>\r\n        )\r\n        return (\r\n            <div className=\"bg-home\">\r\n                <div className=\"pad-top\">\r\n                    <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n                        <Col>\r\n                            <Dropdown overlay={menu} visible={true} placement=\"bottomCenter\">\r\n                                <Button className=\"btn-size\" type=\"default\" shape=\"circle\">\r\n                                    <img className=\"btn-size\" id=\"cover\" src={Logo} alt=\"\" />\r\n                                </Button>\r\n                            </Dropdown>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport { Spin, Icon, Row, Col } from 'antd';\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div style={{ paddingTop: \"20%\" }}>\r\n            <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n                <Col>\r\n                    <h3>Coming Soon....</h3>\r\n                </Col>\r\n            </Row>\r\n            <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n                <Col>\r\n                    <Spin indicator={antIcon} />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { Landing, Home } from './pages/Pages';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    withRouter\n} from \"react-router-dom\";\n\nclass Routing extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={withRouter(Landing)} />\n                    <Route path=\"/home\" component={withRouter(Home)} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nReactDOM.render(<Routing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}